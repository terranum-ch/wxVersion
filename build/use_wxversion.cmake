# SCRIPT FOR BUILDING WXGITVERSION
SET(WXGITVERSION_NAME "wxGitVersion")

#OPTIONS - PARAMETERS 
SET(USE_WXGITVERSION 1 CACHE BOOL "Use component ${WXGITVERSION_NAME}")
IF (USE_WXGITVERSION)
    SET(WXGITVERSION_ENABLED 1)
    SET(WXGITVERSION_SOFT_NAME ${CMAKE_PROJECT_NAME})

    SET(WXGITVERSION_SOURCE_DIR "${CMAKE_CURRENT_LIST_DIR}/..")
    SET(WXGITVERSION_SOFT_DIR "${PROJECT_SOURCE_DIR}")

    ############### SOFTWARE INFORMATION ###################################
    # GET GIT VERSION (SOFTWARE)
    EXECUTE_PROCESS(COMMAND "git" describe  --always --dirty=+ 
            WORKING_DIRECTORY ${WXGITVERSION_SOFT_DIR}
            TIMEOUT 20
            OUTPUT_VARIABLE WXGITVERSION_SOFT_TEXT
            ERROR_VARIABLE MY_ERROR1)
    IF (MY_ERROR1)
        MESSAGE(FATAL_ERROR "myError1 : ${MY_ERROR1}")
    ENDIF (MY_ERROR1)
    STRING(STRIP "${WXGITVERSION_SOFT_TEXT}" WXGITVERSION_SOFT_TEXT)
    MESSAGE("${WXGITVERSION_SOFT_NAME} version: ${WXGITVERSION_SOFT_TEXT}")

    # GET BRANCH NAME (SOFTWARE)
    EXECUTE_PROCESS(COMMAND "git" rev-parse --abbrev-ref HEAD
            WORKING_DIRECTORY ${WXGITVERSION_SOFT_DIR}
            TIMEOUT 20
            OUTPUT_VARIABLE WXGITVERSION_SOFT_BRANCH
            ERROR_VARIABLE MY_ERROR1)
    IF (MY_ERROR1)
        MESSAGE(FATAL_ERROR "myError1 : ${MY_ERROR1}")
    ENDIF (MY_ERROR1)
    STRING(STRIP "${WXGITVERSION_SOFT_BRANCH}" WXGITVERSION_SOFT_BRANCH)
    MESSAGE("${WXGITVERSION_SOFT_NAME} branch: ${WXGITVERSION_SOFT_BRANCH}")

    # GET GIT NUMBER (SOFTWARE)
    EXECUTE_PROCESS(COMMAND "git" rev-list HEAD --count 
            WORKING_DIRECTORY ${WXGITVERSION_SOFT_DIR}
            TIMEOUT 20
            OUTPUT_VARIABLE WXGITVERSION_SOFT_NUMBER
            ERROR_VARIABLE MY_ERROR1)
    IF (MY_ERROR1)
        MESSAGE(FATAL_ERROR "myError1 : ${MY_ERROR1}")
    ENDIF (MY_ERROR1)
    STRING(STRIP "${WXGITVERSION_SOFT_NUMBER}" WXGITVERSION_SOFT_NUMBER)
    MESSAGE("${WXGITVERSION_SOFT_NAME} version number: ${WXGITVERSION_SOFT_NUMBER}")

    ############### WXVERSION INFORMATION ################################
    # GET GIT VERSION (WXGITVERSION)
    EXECUTE_PROCESS(COMMAND "git" describe  --always --dirty=+ 
            WORKING_DIRECTORY ${WXGITVERSION_SOURCE_DIR}
            TIMEOUT 20
            OUTPUT_VARIABLE WXGITVERSION_TEXT
            ERROR_VARIABLE MY_ERROR1)
    IF (MY_ERROR1)
        MESSAGE(FATAL_ERROR "myError1 : ${MY_ERROR1}")
    ENDIF (MY_ERROR1)
    STRING(STRIP "${WXGITVERSION_TEXT}" WXGITVERSION_TEXT)
    MESSAGE("${WXGITVERSION_NAME} version: ${WXGITVERSION_TEXT}")

    # GET BRANCH NAME (WXGITVERSION)
    EXECUTE_PROCESS(COMMAND "git" rev-parse --abbrev-ref HEAD
            WORKING_DIRECTORY ${WXGITVERSION_SOURCE_DIR}
            TIMEOUT 20
            OUTPUT_VARIABLE WXGITVERSION_BRANCH
            ERROR_VARIABLE MY_ERROR1)
    IF (MY_ERROR1)
        MESSAGE(FATAL_ERROR "myError1 : ${MY_ERROR1}")
    ENDIF (MY_ERROR1)
    STRING(STRIP "${WXGITVERSION_BRANCH}" WXGITVERSION_BRANCH)
    MESSAGE("${WXGITVERSION_NAME} branch: ${WXGITVERSION_BRANCH}")

    # GET GIT NUMBER (WXGITVERSION)
    EXECUTE_PROCESS(COMMAND "git" rev-list HEAD --count 
            WORKING_DIRECTORY ${WXGITVERSION_SOURCE_DIR}
            TIMEOUT 20
            OUTPUT_VARIABLE WXGITVERSION_NUMBER
            ERROR_VARIABLE MY_ERROR1)
    IF (MY_ERROR1)
        MESSAGE(FATAL_ERROR "myError1 : ${MY_ERROR1}")
    ENDIF (MY_ERROR1)
    STRING(STRIP "${WXGITVERSION_NUMBER}" WXGITVERSION_NUMBER)
    MESSAGE("${WXGITVERSION_NAME} version number: ${WXGITVERSION_NUMBER}")

    ############################## VROOMGIS INFORMATION #######################
    # VROOMGIS GIT VERSION
    IF (VROOMGIS_PATH)
        # GET GIT VERSION (VROOMGIS)
        EXECUTE_PROCESS(COMMAND "git" describe  --always --dirty=+ 
                WORKING_DIRECTORY ${VROOMGIS_PATH}
                TIMEOUT 20
                OUTPUT_VARIABLE VROOMGIS_TEXT
                ERROR_VARIABLE MY_ERROR1)
        IF (MY_ERROR1)
            MESSAGE(FATAL_ERROR "myError1 : ${MY_ERROR1}")
        ENDIF (MY_ERROR1)
        STRING(STRIP "${VROOMGIS_TEXT}" VROOMGIS_TEXT)
        MESSAGE("VroomGIS version: ${VROOMGIS_TEXT}")

        # GET BRANCH NAME (VROOMGIS)
        EXECUTE_PROCESS(COMMAND "git" rev-parse --abbrev-ref HEAD
                WORKING_DIRECTORY ${VROOMGIS_PATH}
                TIMEOUT 20
                OUTPUT_VARIABLE VROOMGIS_BRANCH
                ERROR_VARIABLE MY_ERROR1)
        IF (MY_ERROR1)
            MESSAGE(FATAL_ERROR "myError1 : ${MY_ERROR1}")
        ENDIF (MY_ERROR1)
        STRING(STRIP "${VROOMGIS_BRANCH}" VROOMGIS_BRANCH)
        MESSAGE("vroomGIS branch: ${VROOMGIS_BRANCH}")

        # GET GIT NUMBER (VROOMGIS)
        EXECUTE_PROCESS(COMMAND "git" rev-list HEAD --count 
                WORKING_DIRECTORY ${VROOMGIS_PATH}
                TIMEOUT 20
                OUTPUT_VARIABLE VROOMGIS_NUMBER
                ERROR_VARIABLE MY_ERROR1)
        IF (MY_ERROR1)
            MESSAGE(FATAL_ERROR "myError1 : ${MY_ERROR1}")
        ENDIF (MY_ERROR1)
        STRING(STRIP "${VROOMGIS_NUMBER}" VROOMGIS_NUMBER)
        MESSAGE("vroomGIS version number: ${VROOMGIS_NUMBER}")
    ENDIF (VROOMGIS_PATH)

    CONFIGURE_FILE("${WXGITVERSION_SOURCE_DIR}/src/wxversion_param.h.in" "${PROJECT_BINARY_DIR}/wxgitversion_param.h")
    INCLUDE_DIRECTORIES("${WXGITVERSION_SOURCE_DIR}/src/")
    INCLUDE_DIRECTORIES("${PROJECT_BINARY_DIR}")
    MESSAGE(${PROJECT_BINARY_DIR})

    #
    # CREATE LIBRARY
    #
    FILE(GLOB WXGITVERSION_SRC_FILES "${WXGITVERSION_SOURCE_DIR}/src/*.cpp")
    SOURCE_GROUP(source FILES ${WXGITVERSION_SRC_FILES})
    FILE(GLOB WXGITVERSION_HEAD_FILES "${WXGITVERSION_SOURCE_DIR}/src/*.h")
    SOURCE_GROUP(header FILES ${WXGITVERSION_HEAD_FILES})
    ADD_LIBRARY(${WXGITVERSION_NAME} STATIC ${WXGITVERSION_SRC_FILES} ${WXGITVERSION_HEAD_FILES})

ELSE (USE_WXGITVERSION)
    MESSAGE("Not using wxGitVersion Component")
ENDIF (USE_WXGITVERSION)


