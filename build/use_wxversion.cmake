# SCRIPT FOR BUILDING WXVERSION
SET(WXVERSION_NAME "wxVersion")

#OPTIONS - PARAMETERS 
SET(USE_WXVERSION 1 CACHE BOOL "Use component ${WXVERSION_NAME}")
IF (USE_WXVERSION)
    SET(WXVERSION_ENABLED 1)
    SET(WXVERSION_SOFT_NAME ${CMAKE_PROJECT_NAME})

    SET(WXVERSION_SOURCE_DIR "${CMAKE_CURRENT_LIST_DIR}/..")
    SET(WXVERSION_SOFT_DIR "${PROJECT_SOURCE_DIR}")

    ############### SOFTWARE INFORMATION ###################################
    # GET GIT VERSION (SOFTWARE)
    EXECUTE_PROCESS(COMMAND "git" describe  --always --dirty=+ 
            WORKING_DIRECTORY ${WXVERSION_SOFT_DIR}
            TIMEOUT 20
            OUTPUT_VARIABLE WXVERSION_SOFT_TEXT
            ERROR_VARIABLE MY_ERROR1)
    IF (MY_ERROR1)
        MESSAGE(FATAL_ERROR "myError1 : ${MY_ERROR1}")
    ENDIF (MY_ERROR1)
    STRING(STRIP "${WXVERSION_SOFT_TEXT}" WXVERSION_SOFT_TEXT)
    MESSAGE("${WXVERSION_SOFT_NAME} version: ${WXVERSION_SOFT_TEXT}")

    # GET BRANCH NAME (SOFTWARE)
    EXECUTE_PROCESS(COMMAND "git" rev-parse --abbrev-ref HEAD
            WORKING_DIRECTORY ${WXVERSION_SOFT_DIR}
            TIMEOUT 20
            OUTPUT_VARIABLE WXVERSION_SOFT_BRANCH
            ERROR_VARIABLE MY_ERROR1)
    IF (MY_ERROR1)
        MESSAGE(FATAL_ERROR "myError1 : ${MY_ERROR1}")
    ENDIF (MY_ERROR1)
    STRING(STRIP "${WXVERSION_SOFT_BRANCH}" WXVERSION_SOFT_BRANCH)
    MESSAGE("${WXVERSION_SOFT_NAME} branch: ${WXVERSION_SOFT_BRANCH}")

    # GET GIT NUMBER (SOFTWARE)
    EXECUTE_PROCESS(COMMAND "git" rev-list HEAD --count 
            WORKING_DIRECTORY ${WXVERSION_SOFT_DIR}
            TIMEOUT 20
            OUTPUT_VARIABLE WXVERSION_SOFT_NUMBER
            ERROR_VARIABLE MY_ERROR1)
    IF (MY_ERROR1)
        MESSAGE(FATAL_ERROR "myError1 : ${MY_ERROR1}")
    ENDIF (MY_ERROR1)
    STRING(STRIP "${WXVERSION_SOFT_NUMBER}" WXVERSION_SOFT_NUMBER)
    MESSAGE("${WXVERSION_SOFT_NAME} version number: ${WXVERSION_SOFT_NUMBER}")

    ############### WXVERSION INFORMATION ################################
    # GET GIT VERSION (WXVERSION)
    EXECUTE_PROCESS(COMMAND "git" describe  --always --dirty=+ 
            WORKING_DIRECTORY ${WXVERSION_SOURCE_DIR}
            TIMEOUT 20
            OUTPUT_VARIABLE WXVERSION_TEXT
            ERROR_VARIABLE MY_ERROR1)
    IF (MY_ERROR1)
        MESSAGE(FATAL_ERROR "myError1 : ${MY_ERROR1}")
    ENDIF (MY_ERROR1)
    STRING(STRIP "${WXVERSION_TEXT}" WXVERSION_TEXT)
    MESSAGE("${WXVERSION_NAME} version: ${WXVERSION_TEXT}")

    # GET BRANCH NAME (WXVERSION)
    EXECUTE_PROCESS(COMMAND "git" rev-parse --abbrev-ref HEAD
            WORKING_DIRECTORY ${WXVERSION_SOURCE_DIR}
            TIMEOUT 20
            OUTPUT_VARIABLE WXVERSION_BRANCH
            ERROR_VARIABLE MY_ERROR1)
    IF (MY_ERROR1)
        MESSAGE(FATAL_ERROR "myError1 : ${MY_ERROR1}")
    ENDIF (MY_ERROR1)
    STRING(STRIP "${WXVERSION_BRANCH}" WXVERSION_BRANCH)
    MESSAGE("${WXVERSION_NAME} branch: ${WXVERSION_BRANCH}")

    # GET GIT NUMBER (WXVERSION)
    EXECUTE_PROCESS(COMMAND "git" rev-list HEAD --count 
            WORKING_DIRECTORY ${WXVERSION_SOURCE_DIR}
            TIMEOUT 20
            OUTPUT_VARIABLE WXVERSION_NUMBER
            ERROR_VARIABLE MY_ERROR1)
    IF (MY_ERROR1)
        MESSAGE(FATAL_ERROR "myError1 : ${MY_ERROR1}")
    ENDIF (MY_ERROR1)
    STRING(STRIP "${WXVERSION_NUMBER}" WXVERSION_NUMBER)
    MESSAGE("${WXVERSION_NAME} version number: ${WXVERSION_NUMBER}")

    ############################## VROOMGIS INFORMATION #######################
    # VROOMGIS GIT VERSION
    IF (VROOMGIS_PATH)
        # GET GIT VERSION (VROOMGIS)
        EXECUTE_PROCESS(COMMAND "git" describe  --always --dirty=+ 
                WORKING_DIRECTORY ${VROOMGIS_PATH}
                TIMEOUT 20
                OUTPUT_VARIABLE VROOMGIS_TEXT
                ERROR_VARIABLE MY_ERROR1)
        IF (MY_ERROR1)
            MESSAGE(FATAL_ERROR "myError1 : ${MY_ERROR1}")
        ENDIF (MY_ERROR1)
        STRING(STRIP "${VROOMGIS_TEXT}" VROOMGIS_TEXT)
        MESSAGE("VroomGIS version: ${VROOMGIS_TEXT}")

        # GET BRANCH NAME (VROOMGIS)
        EXECUTE_PROCESS(COMMAND "git" rev-parse --abbrev-ref HEAD
                WORKING_DIRECTORY ${VROOMGIS_PATH}
                TIMEOUT 20
                OUTPUT_VARIABLE VROOMGIS_BRANCH
                ERROR_VARIABLE MY_ERROR1)
        IF (MY_ERROR1)
            MESSAGE(FATAL_ERROR "myError1 : ${MY_ERROR1}")
        ENDIF (MY_ERROR1)
        STRING(STRIP "${VROOMGIS_BRANCH}" VROOMGIS_BRANCH)
        MESSAGE("vroomGIS branch: ${VROOMGIS_BRANCH}")

        # GET GIT NUMBER (VROOMGIS)
        EXECUTE_PROCESS(COMMAND "git" rev-list HEAD --count 
                WORKING_DIRECTORY ${VROOMGIS_PATH}
                TIMEOUT 20
                OUTPUT_VARIABLE VROOMGIS_NUMBER
                ERROR_VARIABLE MY_ERROR1)
        IF (MY_ERROR1)
            MESSAGE(FATAL_ERROR "myError1 : ${MY_ERROR1}")
        ENDIF (MY_ERROR1)
        STRING(STRIP "${VROOMGIS_NUMBER}" VROOMGIS_NUMBER)
        MESSAGE("vroomGIS version number: ${VROOMGIS_NUMBER}")
    ENDIF (VROOMGIS_PATH)

    CONFIGURE_FILE("${WXVERSION_SOURCE_DIR}/src/wxversion_param.h.in" "${PROJECT_BINARY_DIR}/wxgitversion_param.h")
    INCLUDE_DIRECTORIES("${WXVERSION_SOURCE_DIR}/src/")
    INCLUDE_DIRECTORIES("${PROJECT_BINARY_DIR}")
    MESSAGE(${PROJECT_BINARY_DIR})

    #
    # CREATE LIBRARY
    #
    FILE(GLOB WXVERSION_SRC_FILES "${WXVERSION_SOURCE_DIR}/src/*.cpp")
    SOURCE_GROUP(source FILES ${WXVERSION_SRC_FILES})
    FILE(GLOB WXVERSION_HEAD_FILES "${WXVERSION_SOURCE_DIR}/src/*.h")
    SOURCE_GROUP(header FILES ${WXVERSION_HEAD_FILES})
    ADD_LIBRARY(${WXVERSION_NAME} STATIC ${WXVERSION_SRC_FILES} ${WXVERSION_HEAD_FILES})

ELSE (USE_WXVERSION)
    MESSAGE("Not using wxGitVersion Component")
ENDIF (USE_WXVERSION)


